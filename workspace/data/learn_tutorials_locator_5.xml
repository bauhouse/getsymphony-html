<?xml version="1.0" encoding="utf-8" ?>
<data>
    <learn-tutorial-view>
        <section id="59" handle="tutorials">Tutorials</section>
        <entry id="36368" tutorial-steps="6">
            <audiences>
                <item handle="developers">Developers</item>
            </audiences>
            <author handle="nickdunn">nickdunn</author>
            <concepts>
                <item id="33144" handle="field-types" section-handle="concepts" section-name="Concepts">Field Types</item>
                <item id="33073" handle="data-source-filters" section-handle="concepts" section-name="Concepts">Data Source Filters</item>
                <item id="33066" handle="pages" section-handle="concepts" section-name="Concepts">Pages</item>
                <item id="33065" handle="fields" section-handle="concepts" section-name="Concepts">Fields</item>
            </concepts>
            <conclusion mode="formatted"><p>This tutorial has covered in depth how to build simple &#8220;find my nearest&#8221; functionality in the form of a store locator using the Map Location Field in Symphony 2.</p>
<p>We have seen how to install the Map Location Field, how to use its drag/drop and geocoding functionality, how to use data source filtering to search by radius, and how to interact with this data source from a page.</p>
<p>I hope it&#8217;s given you a good idea about the possibilities now available to you, and how you can use this functionality in your own websites.</p></conclusion>
            <date-modified time="16:08" weekday="1">2010-01-04</date-modified>
            <date-published time="16:08" weekday="1">2010-01-04</date-published>
            <introduction mode="formatted"><p>This tutorial will provide a complete walkthrough of how to implement &#8220;find my nearest&#8221; functionality on your website, most commonly used for store locator searches. Since it is a complete tutorial (with full supporting code) this is intermediate level.</p>
<p>Google Maps makes it easier than ever to build a spatial aspect into our websites. For several years now Symphony has had a Map Location field which displays a Google Map in the backend and allows your authors to drop a marker pin onto a specific location. Version 3 of this field released in January 2010 adds some amazing new features which make a &#8220;find my nearest&#8221; search a joy to implement.</p>
<p>By the end of this tutorial you will have:</p>
<ul>
<li>installed the Map Location Field and learned how to use its main functionality</li>
<li>created a Data Source filter to perform a radius search on a given location</li>
<li>built a frontend to allow users to search and sort entries based on their location</li>
</ul>
<p><img src="http://symphony-cms.com/workspace/assets/learn/Screen-shot-2010-01-05-at-10.06.4-1262686039.png" alt="Store Locator" /></p></introduction>
            <summary mode="formatted"><p>An in-depth tutorial on how to implement &#8220;find my nearest&#8221; in Symphony.</p></summary>
            <title handle="building-a-store-locator-using-the-map-location-field">Building a store locator using the Map Location Field</title>
        </entry>
    </learn-tutorial-view>
    <learn-tutorial-resources>
        <section id="64" handle="resources">Resources</section>
        <error>No records found.</error>
    </learn-tutorial-resources>
    <learn-tutorial-step>
        <section id="60" handle="tutorial-steps">Tutorial Steps</section>
        <entry id="36373">
            <concepts>
                <item id="33066" handle="pages" section-handle="concepts" section-name="Concepts">Pages</item>
                <item id="33121" handle="xslt" section-handle="concepts" section-name="Concepts">XSLT</item>
            </concepts>
            <description mode="formatted"><p>This is the fun bit — building the user interface to allow your users to enter their postcode and see a list of stores near them.</p>
<p>Create a new Page (Blueprints > Pages) and title it <code>Store Locator</code>. Select the <strong>Stores By Location</strong> data source and click the <strong>Create Page</strong> button. Now you can view the debug view of the page and see the Stores By Location data source in action. Go to the following URL:</p>
<pre><code>/store-locator/?debug
</code></pre>
<p>And you will see the <code>&lt;stores-by-location&gt;</code> XML produced by the data source.</p>
<p>Return to the list of pages and click on the link to <code>store-locator.xsl</code> — we are going to write some HTML and XSLT.</p>
<p>Start by removing the blank template in the middle of the XSLT, and replace it with this:</p>
<pre><code>&lt;xsl:template match="data"&gt; 
    &lt;html&gt;
        &lt;head&gt;
            &lt;title&gt;Store Locator&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;h1&gt;Store Locator&lt;/h1&gt;
            &lt;xsl:call-template name="form"/&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="store-locator/entry"&gt;
                    &lt;h2&gt;Found &lt;xsl:value-of select="count(store-locator/entry)"/&gt; stores:&lt;/h2&gt;
                    &lt;ul&gt;
                        &lt;xsl:apply-templates select="store-locator/entry" mode="store"/&gt;
                    &lt;/ul&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;p&gt;No stores found.&lt;/p&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/body&gt;
    &lt;/html&gt; 
&lt;/xsl:template&gt;
</code></pre>
<p>This template matches on the root <code>&lt;data&gt;</code> element in the page XML and contains the basic logic of our page. After the main heading a template is called that renders a search form. Next is a choose/when statement that first checks whether entries have been returned from the data source, then applies a template which will create a list item for each entry.</p>
<p>Under this template add another:</p>
<pre><code>&lt;xsl:template name="form"&gt;  
    &lt;form&gt;
        Find stores within &lt;input type="text" name="range" value="{$url-range}"/&gt;
        of your postcode &lt;input type="text" name="postcode" value="{$url-postcode}"/&gt;
        &lt;input type="submit" value="Search"/&gt;
    &lt;/form&gt; 
&lt;/xsl:template&gt;
</code></pre>
<p>This template is called from the first template. It writes a form into the HTML. Note the <code>{$url-parameter}</code> syntax on each input element — this will take the value from the querystring and re-populate the inputs on page load so the user doesn&#8217;t need to re-type again. However if you access the page <em>without</em> <code>range=foo&amp;postcode=bar</code> on the URL Symphony won&#8217;t know to create parameters with these names and you will get an XSLT error.</p>
<p>Therefore you need to add these additional two lines. I usually add these at the very top (above the first <code>xsl:template</code>) since they are global to the stylesheet:</p>
<pre><code>&lt;xsl:param name="url-range" select="'2'"/&gt;
&lt;xsl:param name="url-postcode"/&gt;
</code></pre>
<p>This creates the two names parameters, also providing a default for the &#8220;range&#8221; parameter.</p>
<p>Last but not least is a third template to render a list item for each store found:</p>
<pre><code>&lt;xsl:template match="entry" mode="store"&gt;
    &lt;li&gt;
        &lt;xsl:value-of select="concat(name, ': ', address)"/&gt;
    &lt;/li&gt;
&lt;/xsl:template&gt;
</code></pre>
<p>Your entire page XSLT should therefore look like this:</p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
&lt;xsl:output method="xml"
    doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN"
    doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"
    omit-xml-declaration="yes"
    encoding="UTF-8"
    indent="yes" /&gt;
&lt;xsl:param name="url-range" select="'2'"/&gt;
&lt;xsl:param name="url-postcode"/&gt;
&lt;xsl:template match="data"&gt; 
    &lt;html&gt;
        &lt;head&gt;
            &lt;title&gt;Store Locator&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;h1&gt;Store Locator&lt;/h1&gt;
            &lt;xsl:call-template name="form"/&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="store-locator/entry"&gt;
                    &lt;h2&gt;Found &lt;xsl:value-of select="count(store-locator/entry)"/&gt; stores:&lt;/h2&gt;
                    &lt;ul&gt;
                        &lt;xsl:apply-templates select="store-locator/entry" mode="store"/&gt;
                    &lt;/ul&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;p&gt;No stores found.&lt;/p&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/body&gt;
    &lt;/html&gt; 
&lt;/xsl:template&gt;
&lt;xsl:template name="form"&gt;  
    &lt;form&gt;
        Find stores within &lt;input type="text" name="range" value="{$url-range}"/&gt;
        of your postcode &lt;input type="text" name="postcode" value="{$url-postcode}"/&gt;
        &lt;input type="submit" value="Search"/&gt;
    &lt;/form&gt; 
&lt;/xsl:template&gt;
&lt;xsl:template match="entry" mode="store"&gt;
    &lt;li&gt;
        &lt;xsl:value-of select="concat(name, ': ', address)"/&gt;
    &lt;/li&gt;
&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</code></pre>
<p>Now let&#8217;s see if this thing works&#8230;</p></description>
            <name handle="displaying-entries-on-a-page">Displaying Entries on a Page</name>
            <resources>
                <item id="34192" handle="empty-page-template" section-handle="resources" section-name="Resources">Empty Page Template</item>
            </resources>
            <step-number>5</step-number>
        </entry>
    </learn-tutorial-step>
    <learn-tutorial-step-resources>
        <section id="64" handle="resources">Resources</section>
        <type handle="code-sample" value="Code Sample">
            <entry id="34192" tutorials="0" tutorial-steps="1">
                <code mode="formatted"><p>&lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&gt;
&lt;xsl:stylesheet version=&amp;quot;1.0&amp;quot;
    xmlns:xsl=&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;&gt;</p>
<p>&lt;xsl:output method=&amp;quot;xml&amp;quot;
    doctype-public=&amp;quot;-//W3C//DTD XHTML 1.0 Strict//EN&amp;quot;
    doctype-system=&amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&amp;quot;
    omit-xml-declaration=&amp;quot;yes&amp;quot;
    encoding=&amp;quot;UTF-8&amp;quot;
    indent=&amp;quot;yes&amp;quot; /&gt;</p>
<p>&lt;xsl:template match=&amp;quot;/&amp;quot;&gt;</p>
<p>&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</p></code>
                <hide>No</hide>
                <note mode="formatted"><p>The default page template auto-generated by Symphony.</p></note>
                <title handle="empty-page-template">Empty Page Template</title>
                <type>
                    <item handle="code-sample">Code Sample</item>
                </type>
            </entry>
        </type>
    </learn-tutorial-step-resources>
    <learn-tutorial-steps>
        <section id="60" handle="tutorial-steps">Tutorial Steps</section>
        <entry id="36369">
            <name handle="install-the-map-location-field">Install the Map Location Field</name>
            <step-number>1</step-number>
        </entry>
        <entry id="36370">
            <name handle="build-your-section">Build your Section</name>
            <step-number>2</step-number>
        </entry>
        <entry id="36371">
            <name handle="populate-the-data">Populate the data</name>
            <step-number>3</step-number>
        </entry>
        <entry id="36372">
            <name handle="select-entries-with-a-data-source">Select Entries with a Data Source</name>
            <step-number>4</step-number>
        </entry>
        <entry id="36373">
            <name handle="displaying-entries-on-a-page">Displaying Entries on a Page</name>
            <step-number>5</step-number>
        </entry>
        <entry id="36374">
            <name handle="testing-and-tweaking">Testing and Tweaking</name>
            <step-number>6</step-number>
        </entry>
    </learn-tutorial-steps>
</data>