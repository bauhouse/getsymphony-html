<?xml version="1.0" encoding="utf-8" ?>
<data>
    <learn-tutorial-view>
        <section id="59" handle="tutorials">Tutorials</section>
        <entry id="36368" tutorial-steps="6">
            <audiences>
                <item handle="developers">Developers</item>
            </audiences>
            <author handle="nickdunn">nickdunn</author>
            <concepts>
                <item id="33144" handle="field-types" section-handle="concepts" section-name="Concepts">Field Types</item>
                <item id="33073" handle="data-source-filters" section-handle="concepts" section-name="Concepts">Data Source Filters</item>
                <item id="33066" handle="pages" section-handle="concepts" section-name="Concepts">Pages</item>
                <item id="33065" handle="fields" section-handle="concepts" section-name="Concepts">Fields</item>
            </concepts>
            <conclusion mode="formatted"><p>This tutorial has covered in depth how to build simple &#8220;find my nearest&#8221; functionality in the form of a store locator using the Map Location Field in Symphony 2.</p>
<p>We have seen how to install the Map Location Field, how to use its drag/drop and geocoding functionality, how to use data source filtering to search by radius, and how to interact with this data source from a page.</p>
<p>I hope it&#8217;s given you a good idea about the possibilities now available to you, and how you can use this functionality in your own websites.</p></conclusion>
            <date-modified time="16:08" weekday="1">2010-01-04</date-modified>
            <date-published time="16:08" weekday="1">2010-01-04</date-published>
            <introduction mode="formatted"><p>This tutorial will provide a complete walkthrough of how to implement &#8220;find my nearest&#8221; functionality on your website, most commonly used for store locator searches. Since it is a complete tutorial (with full supporting code) this is intermediate level.</p>
<p>Google Maps makes it easier than ever to build a spatial aspect into our websites. For several years now Symphony has had a Map Location field which displays a Google Map in the backend and allows your authors to drop a marker pin onto a specific location. Version 3 of this field released in January 2010 adds some amazing new features which make a &#8220;find my nearest&#8221; search a joy to implement.</p>
<p>By the end of this tutorial you will have:</p>
<ul>
<li>installed the Map Location Field and learned how to use its main functionality</li>
<li>created a Data Source filter to perform a radius search on a given location</li>
<li>built a frontend to allow users to search and sort entries based on their location</li>
</ul>
<p><img src="http://symphony-cms.com/workspace/assets/learn/Screen-shot-2010-01-05-at-10.06.4-1262686039.png" alt="Store Locator" /></p></introduction>
            <summary mode="formatted"><p>An in-depth tutorial on how to implement &#8220;find my nearest&#8221; in Symphony.</p></summary>
            <title handle="building-a-store-locator-using-the-map-location-field">Building a store locator using the Map Location Field</title>
        </entry>
    </learn-tutorial-view>
    <learn-tutorial-resources>
        <section id="64" handle="resources">Resources</section>
        <error>No records found.</error>
    </learn-tutorial-resources>
    <learn-tutorial-step>
        <section id="60" handle="tutorial-steps">Tutorial Steps</section>
        <entry id="36372">
            <concepts>
                <item id="33073" handle="data-source-filters" section-handle="concepts" section-name="Concepts">Data Source Filters</item>
            </concepts>
            <description mode="formatted"><p>A &#8220;find my nearest&#8221; application works by starting at a known location (the <em>origin</em>) such as your postcode. It then finds all locations within a given radius of the origin. Provided you know the latitude/longitude of the origin and of the points around it, building the radius range is a tricky mathematical calculation. To account for the curvature of the Earth&#8217;s surface we use the Haversine formula which is accurate to several metres over several hundred miles. More than enough for our needs. Thankfully, the Map Location Field does these calculations for you. All you need to know is the syntax for a Data Source filter.</p>
<p>In the backend navigate to Blueprints > Data Sources and click the <strong>Create New</strong> button. Name the Data Source <code>Stores By Location</code> and be sure it is querying the <strong>Stores</strong> section we just created.</p>
<p>Then add a new Filter by selecting our <strong>Location</strong> field from the dropdown and clicking the <strong>Add item</strong> button. The Map Location Field README file describes the filter in more detail, but put simply a filter should look like this:</p>
<pre><code>within 50 miles of Manchester, UK
</code></pre>
<p>Or more specifically:</p>
<pre><code>within `range` `unit` of `origin`
</code></pre>
<p>For the purpose of our store locator we are going to give users the option of choosing the range and origin. We&#8217;ll fix the units (<code>km</code> or <code>miles</code>) to a preference that suits your audience. The eventual store locator page will be called on a URL like this:</p>
<pre><code>/store-locator/?range=50&amp;postcode=WD3+1HH
</code></pre>
<p>To get these values into the data source filter we can use the querystring parameter syntax:</p>
<pre><code>within {$url-range} km of {$url-postcode}
</code></pre>
<p>Leave the default sorting options (we&#8217;ll be sorting the entries in the XSLT) and increase the limit to something like <code>100</code> â€” we want to give our users choice. Then include the <code>name</code>, <code>address</code> and <code>location</code> items from the Included Elements list at the bottom.</p>
<p>Click the <strong>Create Data Source</strong> button, and you are left with a data source primed for radius searching action.</p></description>
            <name handle="select-entries-with-a-data-source">Select Entries with a Data Source</name>
            <resources>
                <item id="33391" handle="data-source-filter-rule" section-handle="resources" section-name="Resources">Data Source Filter Rule</item>
            </resources>
            <step-number>4</step-number>
        </entry>
    </learn-tutorial-step>
    <learn-tutorial-step-resources>
        <section id="64" handle="resources">Resources</section>
        <type handle="screenshot" value="Screenshot">
            <entry id="33391" tutorials="0" tutorial-steps="1">
                <code mode="formatted" />
                <hide>No</hide>
                <image size="17 KB" path="/assets/learn" type="image/png">
                    <filename>ds-filters-1259433894.png</filename>
                    <meta creation="2009-11-29T04:44:54+10:00" width="987" height="269" />
                </image>
                <note mode="formatted"><p>Sample data source filter rule, returning entries in a Blog Posts section whose Title field matched the value of a $title parameter.</p></note>
                <title handle="data-source-filter-rule">Data Source Filter Rule</title>
                <type>
                    <item handle="screenshot">Screenshot</item>
                </type>
            </entry>
        </type>
    </learn-tutorial-step-resources>
    <learn-tutorial-steps>
        <section id="60" handle="tutorial-steps">Tutorial Steps</section>
        <entry id="36369">
            <name handle="install-the-map-location-field">Install the Map Location Field</name>
            <step-number>1</step-number>
        </entry>
        <entry id="36370">
            <name handle="build-your-section">Build your Section</name>
            <step-number>2</step-number>
        </entry>
        <entry id="36371">
            <name handle="populate-the-data">Populate the data</name>
            <step-number>3</step-number>
        </entry>
        <entry id="36372">
            <name handle="select-entries-with-a-data-source">Select Entries with a Data Source</name>
            <step-number>4</step-number>
        </entry>
        <entry id="36373">
            <name handle="displaying-entries-on-a-page">Displaying Entries on a Page</name>
            <step-number>5</step-number>
        </entry>
        <entry id="36374">
            <name handle="testing-and-tweaking">Testing and Tweaking</name>
            <step-number>6</step-number>
        </entry>
    </learn-tutorial-steps>
</data>